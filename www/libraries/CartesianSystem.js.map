{"version":3,"sources":["webpack://CartesianSystem/webpack/universalModuleDefinition","webpack://CartesianSystem/./Camera.js","webpack://CartesianSystem/./CameraGrid.js","webpack://CartesianSystem/./CreateAA.js","webpack://CartesianSystem/./GameObjectHandler.js","webpack://CartesianSystem/./index.js","webpack://CartesianSystem/webpack/bootstrap","webpack://CartesianSystem/webpack/runtime/global","webpack://CartesianSystem/webpack/startup"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wB;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,UAAU;AAC5B;AACA;AACA;AACA,sBAAsB,UAAU;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,K;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,yBAAyB,eAAe;AACxC;AACA,6BAA6B,eAAe;AAC5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,yBAAyB,eAAe;AACxC;AACA,6BAA6B,eAAe;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yBAAyB,eAAe;AACxC;AACA,6BAA6B,eAAe;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,8BAA8B,oBAAoB;AAClD;AACA,kCAAkC,oBAAoB;AACtD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,4B;;;;;;;;;;AC/IA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,S;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA,0B;;;;;;;;;;ACtLA,eAAe,mBAAO,CAAC,oCAAe;;AAEtC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,yBAAyB,eAAe;AACxC;AACA,6BAA6B,eAAe;AAC5C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,qBAAqB;AAC3C;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,oBAAoB;AAC1C;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mC;;;;;;;;;;ACnIA,eAAe,mBAAO,CAAC,oCAAe;AACtC,iBAAiB,mBAAO,CAAC,wCAAiB;AAC1C,aAAa,mBAAO,CAAC,gCAAa;AAClC,wBAAwB,mBAAO,CAAC,sDAAwB;;AAExD,uB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,a;AACA,uF;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qB;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,0BAA0B,sBAAsB;AAChD;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAM,mC;;;;;;UC1NN;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA,EAAE;WACF;WACA;WACA,CAAC,I;;;;;UCPD;UACA;UACA;UACA","file":"CartesianSystem.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"CartesianSystem\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CartesianSystem\"] = factory();\n\telse\n\t\troot[\"CartesianSystem\"] = factory();\n})(self, function() {\nreturn ","function Camera(x, y, width, height)\r\n{\r\n    this.x = x;\r\n    this.y = y;\r\n    this.width = width;\r\n    this.height = height;\r\n    this.halfWidth = width / 2;\r\n    this.halfHeight = height / 2;\r\n\r\n    this.scrollX = x + this.halfWidth;\r\n    this.scrollY = y + this.halfHeight;\r\n\r\n    this.boundingBox = {\r\n        minX: this.scrollX - this.halfWidth,\r\n        minY: this.scrollY - this.halfHeight,\r\n        maxX: this.scrollX + this.halfWidth,\r\n        maxY: this.scrollY + this.halfHeight\r\n    };\r\n\r\n    this.updateScroll = function(x, y, bounds)\r\n    {\r\n        // Update scroll\r\n        this.scrollX = Math.min(Math.max(x, bounds.minX + this.halfWidth), bounds.maxX - this.halfWidth);\r\n        this.scrollY = Math.min(Math.max(y, bounds.minY + this.halfHeight), bounds.maxY - this.halfHeight);\r\n\r\n        // Update boundingBox\r\n        this.boundingBox.minX = this.scrollX - this.halfWidth;\r\n        this.boundingBox.minY = this.scrollY - this.halfHeight;\r\n        this.boundingBox.maxX = this.scrollX + this.halfWidth;\r\n        this.boundingBox.maxY = this.scrollY + this.halfHeight;\r\n    };\r\n\r\n    this.getTranslation = function()\r\n    {\r\n        return {\r\n            x: this.x + this.halfWidth - this.scrollX,\r\n            y: this.y + this.halfHeight - this.scrollY\r\n        };\r\n    };\r\n}\r\n\r\nmodule.exports = Camera;","function CameraGrid(cols, rows, cellWidth, cellHeight)\r\n{\r\n    this.cols = cols;\r\n    this.rows = rows;\r\n    this.cellWidth = cellWidth;\r\n    this.cellHeight = cellHeight;\r\n    this.halfCellWidth = cellWidth / 2;\r\n    this.halfCellHeight = cellHeight / 2;\r\n\r\n    this.grid = [];\r\n\r\n    var round = Math.round;\r\n    var min = Math.min;\r\n    var max = Math.max;\r\n\r\n    /**\r\n     * Resets the CameraGrid by clearing all the cells\r\n     */\r\n    this.reset = function()\r\n    {\r\n        this.grid.length = 0;\r\n    \r\n        var cols = this.cols;\r\n        var rows = this.rows;\r\n        var i, j;\r\n    \r\n        for(i = 0; i < cols; i++)\r\n        {\r\n            this.grid.push([]);\r\n            // Create a cell with no __proto__ object\r\n            for(j = 0; j < rows; j++)\r\n            {\r\n                this.grid[i][j] = Object.create(null);\r\n            }\r\n        }\r\n        \r\n        this.minCol = 0;\r\n        this.minRow = 0;\r\n        this.maxCol = this.grid.length - 1;\r\n        this.maxRow = this.grid[0].length - 1;\r\n    };\r\n\r\n    /**\r\n     * Converts x and y to col and row\r\n     * \r\n     * @method CameraGrid#getCoordinates\r\n     * @returns {object} col and row\r\n     */\r\n    this.getCoordinates = function(x, y)\r\n    {\r\n        return {\r\n            col: max(min(round((x - this.halfCellWidth) / this.cellWidth), this.maxCol), this.minCol),\r\n            row: max(min(round((y - this.halfCellHeight) / this.cellHeight), this.maxRow), this.minRow)\r\n        };\r\n    };\r\n\r\n    this.addReference = function(object)\r\n    {   \r\n        var key = object._arrayName + object._id;\r\n        var toSet = {\r\n            arrayName: object._arrayName,\r\n            id: object._id\r\n        };\r\n\r\n        var box = object.bodyConf.boundingBox;\r\n\r\n        var minCol = max(min(round((box.minX - this.halfCellWidth) / this.cellWidth), this.maxCol), this.minCol),\r\n            minRow = max(min(round((box.minY - this.halfCellHeight) / this.cellHeight), this.maxRow), this.minRow),\r\n            maxCol = max(min(round((box.maxX - this.halfCellWidth) / this.cellWidth), this.maxCol), this.minCol),\r\n            maxRow = max(min(round((box.maxY - this.halfCellHeight) / this.cellHeight), this.maxRow), this.minRow);\r\n\r\n        var col, row;\r\n\r\n        for(col = minCol; col <= maxCol; col++)\r\n        {\r\n            for(row = minRow; row <= maxRow; row++)\r\n            {\r\n                this.grid[col][row][key] = toSet;\r\n            }\r\n        }\r\n\r\n        object._minCol = minCol;\r\n        object._minRow = minRow;\r\n        object._maxCol = maxCol;\r\n        object._maxRow = maxRow;\r\n    };\r\n\r\n    this.removeReference = function(object)\r\n    {\r\n        var key = object._arrayName + object._id;\r\n\r\n        var minCol = object._minCol,\r\n            minRow = object._minRow,\r\n            maxCol = object._maxCol,\r\n            maxRow = object._maxRow;\r\n\r\n        var col, row;\r\n\r\n        for(col = minCol; col <= maxCol; col++)\r\n        {\r\n            for(row = minRow; row <= maxRow; row++)\r\n            {\r\n                delete this.grid[col][row][key];\r\n            }\r\n        }\r\n    };\r\n\r\n    this.loopThroughCells = function(minCol, minRow, maxCol, maxRow, callback)\r\n    {\r\n        var col, row;\r\n\r\n        for(col = minCol; col <= maxCol; col++)\r\n        {\r\n            for(row = minRow; row <= maxRow; row++)\r\n            {\r\n                callback(this.grid[col][row], col, row);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Will be expensive since this applies to the entire grid\r\n    this.removeAll = function(arrayToRemove)\r\n    {\r\n        var col, row, cell, i;\r\n\r\n        for(col = this.minCol; col <= this.maxCol; col++)\r\n        {\r\n            for(row = this.minRow; row <= this.maxRow; row++)\r\n            {\r\n                cell = this.grid[col][row];\r\n\r\n                for(i in cell)\r\n                {\r\n                    if(cell[i].arrayName === arrayToRemove)\r\n                    {\r\n                        delete cell[i];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nmodule.exports = CameraGrid;","/**\r\n * @function `createAA` Creates a key value pair system or associative array with methods\r\n * \r\n * @param {Object} object The constructor/object to pass in \r\n * @param {object} keypairs The keypairs/associative array to pass in (optional)\r\n * @param {string} arrayName What this array will be called (optional)\r\n * \r\n * @returns {object} The keypair/associative array\r\n */\r\nfunction CreateAA(object, keypairs, arrayName)\r\n{\r\n    if(typeof keypairs !== \"object\")\r\n    {\r\n        keypairs = Object.create(null);\r\n    }\r\n\r\n    if(typeof arrayName === \"undefined\")\r\n    {\r\n        arrayName = object.name.charAt(0).toLowerCase() + object.name.slice(1);\r\n    }\r\n\r\n    /**\r\n     * All the methods and properties that are **NOT** part of the data that will be stored in `keypairs`\r\n     */\r\n    var system = {\r\n        cache: {\r\n            lowest: undefined, // Lowest empty index\r\n            highest: -1, // highest index\r\n        },\r\n        references: {},\r\n        length: 0,\r\n        _name: arrayName,\r\n        // Any thing added to this `add` method must also be added to the `add` method in the `if` statement\r\n        add: function()\r\n        {\r\n            var id = this.cache.highest + 1;\r\n\r\n            if(this.cache.lowest !== undefined && !this.unique)\r\n            {\r\n                id = this.cache.lowest;\r\n                this.cache.lowest = undefined;\r\n            }\r\n            if(id > this.cache.highest)\r\n            {\r\n                this.cache.highest = id;\r\n            }\r\n            this.cache.tempId = id;\r\n            this.length++;\r\n\r\n            var item = new (Function.prototype.bind.apply(object, [null].concat(Array.prototype.slice.call(arguments))));\r\n\r\n            this[id] = item;\r\n            this[id]._name = this.cache.tempName === undefined ? this._name : this.cache.tempName;\r\n            this[id]._arrayName = this._name;\r\n            this[id]._id = id;\r\n            return item;\r\n        },\r\n        remove: function(id)\r\n        {\r\n            if(this[id] === undefined)\r\n            {\r\n                return false;\r\n            }\r\n\r\n            if(id === this.cache.highest)\r\n            {\r\n                this.cache.highest--;\r\n            }\r\n            if(this.cache.lowest === undefined || id < this.cache.lowest)\r\n            {\r\n                this.cache.lowest = id;\r\n            }\r\n\r\n            this.length--;\r\n            return delete this[id];\r\n        },\r\n        addObject: function(name)\r\n        {\r\n            if(this.references[name] !== undefined)\r\n            {\r\n                return;\r\n            }\r\n            \r\n            var args = Array.prototype.slice.call(arguments);\r\n            this.cache.tempName = args.shift();\r\n            var item = this.add.apply(this, args);\r\n            this.references[name] = this.cache.tempId;\r\n            delete this.cache.tempId;\r\n            return item;\r\n        },\r\n        getObject: function(name)\r\n        {\r\n            return this[this.references[name]] || delete this.references[name];\r\n        },\r\n        removeObject: function(name)\r\n        {   \r\n            var toRemove = this.references[name];\r\n            var success = delete this.references[name];\r\n\r\n            return this.remove(toRemove) && success;\r\n        },\r\n        forEach: function(callback)\r\n        {\r\n            for(var i in this)\r\n            {\r\n                callback(this[i], i, this);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        define: function(key, prop)\r\n        {\r\n            Object.defineProperty(this, key,  \r\n            {\r\n                enumerable: false,\r\n                writable: true,\r\n                configurable: true,\r\n                value: prop\r\n            });\r\n        }\r\n    };\r\n\r\n    // If it's an array\r\n    if(object.apply === undefined)\r\n    {\r\n        system.add = function()\r\n        {\r\n            var id = this.cache.highest + 1;\r\n            if(this.cache.lowest !== undefined && !this.unique)\r\n            {\r\n                id = this.cache.lowest;\r\n                this.cache.lowest = undefined;\r\n            }\r\n            if(id > this.cache.highest)\r\n            {\r\n                this.cache.highest = id;\r\n            }\r\n            this.cache.tempId = id;\r\n            this.length++;\r\n\r\n            this[id] = arguments[0];\r\n\r\n            Object.defineProperty(this[id], \"_name\", \r\n            {\r\n                enumerable: false,\r\n                writable: true,\r\n                configurable: true,\r\n                value: this.cache.tempName === undefined ? this._name : this.cache.tempName\r\n            });\r\n            Object.defineProperty(this[id], \"_arrayName\",\r\n            {\r\n                enumerable: false,\r\n                writable: true,\r\n                configurable: true,\r\n                value: this._name\r\n            });\r\n            Object.defineProperty(this[id], \"_id\", \r\n            {\r\n                enumerable: false,\r\n                writable: true,\r\n                configurable: true,\r\n                value: id\r\n            });\r\n            return this[id];\r\n        };\r\n    }\r\n\r\n    // Add methods and properties from system to keypairs/associative array that will be returned\r\n    for(var i in system)\r\n    {\r\n        Object.defineProperty(keypairs, i,  \r\n        {\r\n            enumerable: false,\r\n            writable: true,\r\n            configurable: true,\r\n            value: system[i]\r\n        });\r\n    }\r\n\r\n    return keypairs;\r\n}\r\n\r\nmodule.exports = CreateAA;","var createAA = require(\"./CreateAA.js\");\r\n\r\nfunction GameObjectHandler()\r\n{\r\n    var gameObjects = createAA([], undefined, \"gameObjects\");\r\n\r\n    // Process list used for loop (mainly so we don't use an object again)\r\n    var usedFL = {};\r\n    // Will be used as a cache to contain all the stuff we need to process\r\n    var used = {};\r\n\r\n    this.forEach = function(callback)\r\n    {\r\n        return gameObjects.forEach(callback);\r\n    };\r\n\r\n    this.addArray = function(name, gameObjectArray)\r\n    {\r\n        return gameObjects.addObject(name, gameObjectArray);\r\n    };\r\n    \r\n    this.getArray = function(name)\r\n    {\r\n        return gameObjects.getObject(name);\r\n    };\r\n\r\n    this.removeArray = function(name)\r\n    {\r\n        return gameObjects.removeObject(name);\r\n    };\r\n\r\n    this.resetProcessList = function()\r\n    {\r\n        usedFL = {};\r\n        used = {};\r\n    };\r\n\r\n    this.addToProcessList = function(cameraGrid, minCol, minRow, maxCol, maxRow) \r\n    {\r\n        var grid = cameraGrid.grid;\r\n\r\n        var col, row, cell, i, object, id;\r\n\r\n        // Loop through grid\r\n        for(col = minCol; col <= maxCol; col++)\r\n        {\r\n            for(row = minRow; row <= maxRow; row++)\r\n            {\r\n                cell = grid[col][row];\r\n\r\n                // Loop through the cell\r\n                for(i in cell)\r\n                {\r\n                    // We already recorded key (`object._arrayName + object._id`), so don't do it again since some \r\n                    // objects can be in multiple cells at a time\r\n                    if(usedFL[i])\r\n                    {\r\n                        continue;\r\n                    }\r\n\r\n                    // Is the same as createAA#getObject(name)\r\n                    object = gameObjects[gameObjects.references[cell[i].arrayName]][cell[i].id];\r\n\r\n                    // Save info for rendering\r\n                    id = gameObjects.references[object._arrayName];\r\n                    used[id] = used[id] === undefined ? [] : used[id];\r\n                    used[id].push(object._id);\r\n\r\n                    // Show we've recorded the key (`object._arrayName + object._id`)\r\n                    usedFL[i] = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Sort the used id array\r\n        for(id in used)\r\n        {\r\n            used[id].sort();\r\n        }\r\n    };\r\n\r\n    /**\r\n     * \r\n     * @param {object} cameraGrid The cameragrid to pass in\r\n     * @param {string} key The name of the method to execute on every game object that's in the process list (must be in every game object)\r\n     */\r\n    this.act = function(cameraGrid, key)\r\n    {\r\n        var id, j, object;\r\n\r\n        for(id in used)\r\n        {\r\n            for(j = 0; j < used[id].length; j++)\r\n            {\r\n                object = gameObjects[id][used[id][j]];\r\n\r\n                object[key]();\r\n\r\n                // Refreshes the object's cell place after it has been moved \r\n                if(object.bodyConf.moves)\r\n                {\r\n                    cameraGrid.removeReference(object);\r\n                    cameraGrid.addReference(object);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    this.loopProcessList = function(cameraGrid, callback)\r\n    {\r\n        var i, j, object;\r\n\r\n        for(i in used)\r\n        {\r\n            for(j = 0; j < used[i].length; j++)\r\n            {\r\n                object = gameObjects[i][used[i][j]];\r\n\r\n                callback(object, gameObjects.references[i], used[i][j]);\r\n\r\n                // Refreshes the object's cell place after it has been moved \r\n                if(object.bodyConf.moves)\r\n                {\r\n                    cameraGrid.removeReference(object);\r\n                    cameraGrid.addReference(object);\r\n                }\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nmodule.exports = GameObjectHandler;","var CreateAA = require(\"./CreateAA.js\");\r\nvar CameraGrid = require(\"./CameraGrid.js\");\r\nvar Camera = require(\"./Camera.js\");\r\nvar GameObjectHandler = require(\"./GameObjectHandler.js\");\r\n\r\nvar CartesianSystem = { \r\n    World: function(config)\r\n    {\r\n        this.camera = new Camera(\r\n            config.window.x === undefined ? 0 : config.window.x,\r\n            config.window.y === undefined ? 0 : config.window.y,\r\n            config.window.width,\r\n            config.window.height\r\n        );\r\n\r\n        this.cameraGrid = new CameraGrid(\r\n            config.grid.cols, \r\n            config.grid.rows, \r\n            config.grid.cellWidth,\r\n            config.grid.cellHeight\r\n        );\r\n\r\n        this.gameObjectHandler = new GameObjectHandler();\r\n\r\n        this.init = function()\r\n        {\r\n            this.cameraGrid.reset();\r\n\r\n            return this;\r\n        };\r\n\r\n        var _this = this;\r\n        this.add = {};\r\n        this.add.gameObjectArray = function(object, arrayName)\r\n        {\r\n            if(arrayName === undefined) \r\n            { \r\n                arrayName = object.name.charAt(0).toLowerCase() + object.name.slice(1); \r\n            }\r\n\r\n            var array = _this.gameObjectHandler.addArray(arrayName, CreateAA(object, undefined, arrayName));\r\n\r\n            var lastAdd = array.add;\r\n            Object.defineProperty(array, \"add\", \r\n            {\r\n                enumerable: false,\r\n                writable: true,\r\n                configurable: true,\r\n                value: function()\r\n                {\r\n                    var gameObject = lastAdd.apply(this, arguments);\r\n                    _this.cameraGrid.addReference(gameObject);\r\n                    return gameObject;\r\n                }\r\n            });\r\n            var lastAddObject = array.addObject;\r\n            Object.defineProperty(array, \"addObject\", \r\n            {\r\n                enumerable: false,\r\n                writable: true,\r\n                configurable: true,\r\n                value: function()\r\n                {\r\n                    var gameObject = lastAddObject.apply(this, arguments);\r\n                    if(gameObject === undefined) \r\n                    { \r\n                        return;\r\n                    }\r\n\r\n                    _this.cameraGrid.addReference(gameObject);\r\n                    return gameObject;\r\n                }\r\n            });\r\n\r\n            var lastRemove = array.remove;\r\n            Object.defineProperty(array, \"remove\",  \r\n            {\r\n                enumerable: false,\r\n                writable: true,\r\n                configurable: true,\r\n                value: function(id)\r\n                {\r\n                    _this.cameraGrid.removeReference(this[id]);\r\n                    return lastRemove.apply(this, arguments);\r\n                }\r\n            });\r\n            var lastRemoveObject = array.removeObject;\r\n            Object.defineProperty(array, \"removeObject\",  \r\n            {\r\n                enumerable: false,\r\n                writable: true,\r\n                configurable: true,\r\n                value: function(name)\r\n                {\r\n                    _this.cameraGrid.removeReference(this[this.references[name]]);\r\n                    return lastRemoveObject.apply(this, arguments);\r\n                }\r\n            });\r\n\r\n            return array;\r\n        };\r\n        this.add.gameObject = function(arrayName)\r\n        {\r\n            var gameObjectArray = _this.gameObjectHandler.getArray(arrayName);\r\n            var gameObject = gameObjectArray.add.apply(gameObjectArray, Array.prototype.slice.call(arguments, 1));\r\n            _this.cameraGrid.addReference(gameObject);\r\n            return gameObject;\r\n        };\r\n\r\n        this.get = {};\r\n        this.get.gameObjectArray = function(arrayName)\r\n        {\r\n            return _this.gameObjectHandler.getArray(arrayName);\r\n        };\r\n        this.get.gameObject = function(arrayName, id)\r\n        {\r\n            return _this.gameObjectHandler.getArray(arrayName)[id];\r\n        };\r\n\r\n        this.remove = {};\r\n        this.remove.gameObjectArray = function(arrayName)\r\n        {\r\n            _this.cameraGrid.removeAll(arrayName);\r\n            gameObjectHandler.removeArray(arrayName);\r\n            return this;\r\n        };\r\n        this.remove.gameObject = function(arrayName, id)\r\n        {\r\n            var gameObjectArray = _this.gameObjectHandler.getArray(arrayName);\r\n            _this.cameraGrid.removeReference(gameObjectArray[id]);\r\n            gameObjectArray.remove(id);\r\n            return this;\r\n        };\r\n\r\n        // Bounds to confine the camera into\r\n        this.bounds = {\r\n            minX: 0,\r\n            minY: 0,\r\n            maxX: 0 + this.cameraGrid.cols * this.cameraGrid.cellWidth,\r\n            maxY: 0 + this.cameraGrid.rows * this.cameraGrid.cellHeight\r\n        };\r\n\r\n        this.loopThroughVisibleCells = function(callback)\r\n        {\r\n            var minPos = this.minCamPos = this.cameraGrid.getCoordinates(this.camera.boundingBox.minX, this.camera.boundingBox.minY);\r\n            var maxPos = this.maxCamPos = this.cameraGrid.getCoordinates(this.camera.boundingBox.maxX, this.camera.boundingBox.maxY);\r\n\r\n            this.cameraGrid.loopThroughCells( \r\n                minPos.col,\r\n                minPos.row,\r\n                maxPos.col,\r\n                maxPos.row, \r\n                callback\r\n            );\r\n        };\r\n\r\n        this.updateProcessList = function()\r\n        {\r\n            var minPos = this.minCamPos = this.cameraGrid.getCoordinates(this.camera.boundingBox.minX, this.camera.boundingBox.minY);\r\n            var maxPos = this.maxCamPos = this.cameraGrid.getCoordinates(this.camera.boundingBox.maxX, this.camera.boundingBox.maxY);\r\n\r\n            this.gameObjectHandler.addToProcessList(\r\n                this.cameraGrid,\r\n                minPos.col,\r\n                minPos.row,\r\n                maxPos.col,\r\n                maxPos.row\r\n            );\r\n        };\r\n\r\n        this.loopProcessList = function(callback)\r\n        {\r\n            this.gameObjectHandler.loopProcessList(this.cameraGrid, callback);\r\n        };\r\n\r\n        this.resetProcessList = function()\r\n        {\r\n            this.gameObjectHandler.resetProcessList();\r\n        };\r\n\r\n        this.update = function(x, y)\r\n        {\r\n            this.camera.updateScroll(x, y, this.bounds);\r\n\r\n            var minPos = this.minCamPos = this.cameraGrid.getCoordinates(this.camera.boundingBox.minX, this.camera.boundingBox.minY);\r\n            var maxPos = this.maxCamPos = this.cameraGrid.getCoordinates(this.camera.boundingBox.maxX, this.camera.boundingBox.maxY);\r\n\r\n            // Bail if we don't have enough arguments to suffice `GameObjecthandler#act`\r\n            if(arguments.length <= 2)\r\n            {\r\n                return;\r\n            }\r\n\r\n            this.gameObjectHandler.addToProcessList(\r\n                this.cameraGrid,\r\n                minPos.col,\r\n                minPos.row,\r\n                maxPos.col,\r\n                maxPos.row\r\n            );\r\n\r\n            var inputArgs = Array.prototype.slice.call(arguments).slice(2);\r\n\r\n            for(var i = 0; i < inputArgs.length; i++)\r\n            {\r\n                this.gameObjectHandler.act.apply(this.gameObjectHandler, [this.cameraGrid].concat(inputArgs[i]));\r\n            }\r\n\r\n            this.gameObjectHandler.resetProcessList();\r\n        };\r\n    },\r\n    CreateAA: CreateAA,\r\n    Camera: Camera,\r\n    CameraGrid: CameraGrid,\r\n    GameObjectHandler: GameObjectHandler\r\n};\r\n\r\nmodule.exports = CartesianSystem;\r\nglobal.CartesianSystem = CartesianSystem;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./index.js\");\n"],"sourceRoot":""}